package char

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCanvas_BlankCanvas(t *testing.T) {
	t.Run("Test Blank Canvas", func(t *testing.T) {
		c := NewCanvas()
		canvas := c.BlankCanvasAsString()
		want := `╔╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╗
╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╚╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╝`
		assert.Equal(t, want, canvas)
	})
}

func TestCanvas_BlankCanvasAsString(t *testing.T) {
	tests := []struct {
		name  string
		words []Char
		wants string
	}{
		{
			name:  "Test l",
			words: []Char{CharacterL},
			wants: `╔╦╦╦╦╦╦╗
╠▓▓▓░╬╬╣
╠╬╬▓▓░╬╣
╠╬╬▓▓░╬╣
╠╬╬▓▓░╬╣
╠╬╬▓▓░╬╣
╠╬╬▓▓░╬╣
╠╬╬▓▓░╬╣
╠╬╬▓▓░╬╣
╠╬╬╬▓▓▓░
╚╩╩╩╩╩╩╝`,
		},
		{
			name:  "Test `",
			words: []Char{CharacterApostrophe},
			wants: `╔▓▓░
╠▓░╣
╠╬╬╣
╠╬╬╣
╠╬╬╣
╠╬╬╣
╠╬╬╣
╠╬╬╣
╠╬╬╣
╠╬╬╣
╚╩╩╝`,
		},
		{
			name:  "Test o",
			words: []Char{CharacterO},
			wants: `╔╦╦╦╦╦╦╦╦╦╦╦╗
╠╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬╬▓▓▓▓▓░╬╬╣
╠╬▓▓░╬╬╬╬▓▓░╣
╠▓▓░╬╬╬╬╬╬▓▓░
╠▓▓░╬╬╬╬╬╬▓▓░
╠╬▓▓░╬╬╬╬▓▓░╣
╠╬╬╬▓▓▓▓▓░╬╬╣
╚╩╩╩╩╩╩╩╩╩╩╩╝`,
		},
		{
			name:  "Test G",
			words: []Char{CharacterG},
			wants: `╔╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╗
╠╬╬╬╬╬▓▓▓▓▓▓░╬╬╬╣
╠╬╬╬▓▓░╬╬╬╬▓▓▓░╬╣
╠╬╬▓▓░╬╬╬╬╬╬╬╬╬╬╣
╠╬▓▓░╬╬╬╬╬╬╬╬╬╬╬╣
╠▓▓░╬╬╬╬╬╬╬╬╬╬╬╬╣
╠▓▓░╬╬╬╬╬╬╬▓▓▓▓▓░
╠▓▓░╬╬╬╬╬╬╬╬╬▓▓░╣
╠╬╬▓▓░╬╬╬╬╬╬▓▓▓░╣
╠╬╬╬╬▓▓▓▓▓▓▓░╬╬╬╣
╚╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╝`,
		},
		{
			name:  "Test rev G",
			words: []Char{CharacterRevG},
			wants: `╔╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╗
╠╬╬╬╬▓▓▓▓▓▓░╬╬╬╬╣
╠╬╬▓▓▓░╬╬╬╬▓▓░╬╬╣
╠╬╬╬╬╬╬╬╬╬╬╬▓▓░╬╣
╠╬╬╬╬╬╬╬╬╬╬╬╬▓▓░╣
╠╬╬╬╬╬╬╬╬╬╬╬╬╬▓▓░
╠▓▓▓▓▓░╬╬╬╬╬╬╬▓▓░
╠╬▓▓░╬╬╬╬╬╬╬╬╬▓▓░
╠╬▓▓▓░╬╬╬╬╬╬▓▓░╬╣
╠╬╬╬╬▓▓▓▓▓▓▓░╬╬╬╣
╚╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╝`,
		},
		{
			name:  "Test l`oGGo",
			words: LoggoLogo,
			wants: `╔╦╦╦╦╦╦╦╦▓▓░╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╗
╠▓▓▓░╬╬╬╬▓░╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓▓▓▓▓▓░╬╬╬╬╬╬╬╬╬╬╬▓▓▓▓▓▓░╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬▓▓░╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓▓▓░╬╬╬╬▓▓░╬╬╬╬╬╬╬▓▓░╬╬╬╬▓▓▓░╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬▓▓░╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓▓░╬╬╬╬╬▓▓░╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╣
╠╬╬▓▓░╬╬╬╬╬╬▓▓▓▓▓░╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓▓░╬╬╬▓▓░╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓▓▓▓▓░╬╬╬╬╬╬╣
╠╬╬▓▓░╬╬╬╬▓▓░╬╬╬╬▓▓░╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓▓░╬▓▓░╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓▓░╬╬╬╬▓▓░╬╬╬╬╣
╠╬╬▓▓░╬╬╬▓▓░╬╬╬╬╬╬▓▓░╬▓▓▓▓▓░╬╬╬╬╬╬╬▓▓░╬▓▓░╬╬╬╬╬╬╬▓▓▓▓▓░╬▓▓░╬╬╬╬╬╬▓▓░╬╬╬╣
╠╬╬▓▓░╬╬╬▓▓░╬╬╬╬╬╬▓▓░╬╬▓▓░╬╬╬╬╬╬╬╬╬▓▓░╬▓▓░╬╬╬╬╬╬╬╬╬▓▓░╬╬▓▓░╬╬╬╬╬╬▓▓░╬╬╬╣
╠╬╬▓▓░╬╬╬╬▓▓░╬╬╬╬▓▓░╬╬╬▓▓▓░╬╬╬╬╬╬▓▓░╬╬╬╬╬▓▓░╬╬╬╬╬╬▓▓▓░╬╬╬▓▓░╬╬╬╬▓▓░╬╬╬╬╣
╠╬╬╬▓▓▓░╬╬╬╬▓▓▓▓▓░╬╬╬╬╬╬╬╬▓▓▓▓▓▓▓░╬╬╬╬╬╬╬╬╬▓▓▓▓▓▓▓░╬╬╬╬╬╬╬╬▓▓▓▓▓░╬╬╬╬╬╬╣
╚╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╝`,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			c := NewCanvas().WithWord(test.words...)
			str := c.PrintCanvasAsString()
			fmt.Println(str)
			assert.Equal(t, test.wants, str)
		})
	}
}

func TestCanvas_PrintCanvasAsHtml(t *testing.T) {
	c := NewCanvas().WithWord(LoggoLogo...)
	str := c.PrintCanvasAsHtml()
	fmt.Println(str)
}
